<?php

namespace Tests\Feature\Services;

use App\Services\DriveInService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Http;
use Tests\TestCase;

class DriveInServiceTest extends TestCase
{
    use RefreshDatabase;

    protected DriveInService $drive_in_service;

    #[\Override]
    protected function setUp(): void
    {
        $this->drive_in_service = app(DriveInService::class);
        $this->assertNotNull($this->drive_in_service);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function it_calls_out_for_similar_words(): void
    {
        $mock_result_array = ['alex', 'http_fake', 'laravel', 'is', 'awesome'];
        $mock_similar_result_array = ['alex', 'http fake', 'laravel', 'is', 'awesome']; // http_fake -> http fake
        Http::fake([
            '*' => Http::response(['message' => 'ok', 'result' => $mock_result_array], 200),
        ]);

        $similar_words = $this->drive_in_service->getSimilarityWords('alice');
        $this->assertEquals($mock_similar_result_array, $similar_words);
    }

    /**
     * @test
     */
    public function it_returns_blank_array_on_issue(): void
    {
        $mock_result = false; // bogus return from the service.
        $mock_similar_result_array = [];
        Http::fake([
            '*' => Http::response(['message' => 'ok', 'result' => $mock_result], 200),
        ]);

        $similar_words = $this->drive_in_service->getSimilarityWords('alice');
        $this->assertEquals([], $similar_words);
    }
}
