<?php

namespace Tests\Feature\Services;

use App\Services\EuropeanCountriesService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class EuropeanCountriesServiceTest extends TestCase
{
    use RefreshDatabase;

    protected EuropeanCountriesService $european_countries_service;

    #[\Override]
    protected function setUp(): void
    {
        $this->european_countries_service = app(EuropeanCountriesService::class);
        $this->assertNotNull($this->european_countries_service);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function it_gets_all_the_options(): void
    {
        $options = $this->european_countries_service->getOptionsArray();
        $this->assertNotNull($options);
        $this->assertCount(30, $options);
    }

    /**
     * @test
     */
    public function it_condenses_european_union_countries(): void
    {
        $country_codes = EuropeanCountriesService::EUROPEAN_UNION_COUNTRY_CODES;
        $names = $this->european_countries_service->getCountryNames($country_codes);
        $this->assertEquals(['European Union'], $names);
    }

    /**
     * @test
     */
    public function it_condenses_countries_uniquely(): void
    {
        $country_codes = ['SK', 'BE', 'AU', 'SK', 'BE', 'AU', 'SK', 'BE', 'AU', 'SK', 'BE', 'AU', 'AU', 'AU', 'AU'];
        $result = $this->european_countries_service->filterSortEuropeanCountries($country_codes);
        $this->assertEquals(['BE', 'SK'], $result);
    }

    /**
     * @test
     */
    public function it_condenses_european_economic_area_countries(): void
    {
        $country_codes = EuropeanCountriesService::EUROPEAN_ECONOMIC_AREA_COUNTRY_CODES;
        $names = $this->european_countries_service->getCountryNames($country_codes);
        $this->assertEquals(['European Economic Area'], $names);
    }

    /**
     * @test
     */
    public function it_does_not_condense_european_union_countries(): void
    {
        $country_codes = EuropeanCountriesService::EUROPEAN_UNION_COUNTRY_CODES;
        $names = $this->european_countries_service->getCountryNames($country_codes, false);
        $this->assertNotEquals(['European Union'], $names);
        $this->assertCount(27, $names);
    }

    /**
     * @test
     */
    public function it_filters_out_non_european_countries(): void
    {
        $country_codes = EuropeanCountriesService::EUROPEAN_UNION_COUNTRY_CODES;
        $country_codes[] = 'US';
        $country_codes[] = 'CA';
        $country_codes[] = 'XX';
        $country_codes[] = 'NOT EVEN CLOSE TO AN ISO';

        $result = $this->european_countries_service->filterSortEuropeanCountries($country_codes);
        $this->assertCount(27, $result);

        $this->assertNotContains('US', $result);
        $this->assertNotContains('CA', $result);
        $this->assertNotContains('XX', $result);
        $this->assertNotContains('NOT EVEN CLOSE TO AN ISO', $result);
    }

    /**
     * @test
     */
    public function it_does_not_break_on_empty(): void
    {
        $country_codes = [];
        $result = $this->european_countries_service->filterSortEuropeanCountries($country_codes);
        $this->assertCount(0, $result);
    }

    /**
     * @test
     */
    public function ensure_that_country_codes_arrays_are_in_alphabetical_order(): void
    {
        $codes = EuropeanCountriesService::EUROPEAN_COUNTRY_CODES;
        $result = $codes;
        sort($result);
        $this->assertEquals($result, $codes);

        $codes = EuropeanCountriesService::EUROPEAN_ECONOMIC_AREA_COUNTRY_CODES;
        $result = $codes;
        sort($result);
        $this->assertEquals($result, $codes);

        $codes = EuropeanCountriesService::EUROPEAN_UNION_COUNTRY_CODES;
        $result = $codes;
        sort($result);
        $this->assertEquals($result, $codes);
    }

    /**
     * @test
     *
     * @throws \JsonException
     */
    public function the_char_length_is_ok(): void
    {
        $max = 255;
        $all = json_encode(EuropeanCountriesService::EUROPEAN_UNION_COUNTRY_CODES, JSON_THROW_ON_ERROR);
        $this->assertLessThan($max, strlen($all));
        $all = json_encode(EuropeanCountriesService::EUROPEAN_COUNTRY_CODES, JSON_THROW_ON_ERROR);
        $this->assertLessThan($max, strlen($all));
        $all = json_encode(EuropeanCountriesService::EUROPEAN_ECONOMIC_AREA_COUNTRY_CODES, JSON_THROW_ON_ERROR);
        $this->assertLessThan($max, strlen($all));
    }

    /**
     * @test
     */
    public function it_throws_an_error_and_returns_false(): void
    {
        $test_iso = 'xx';
        $result = $this->european_countries_service->getCountryName($test_iso);
        $this->assertFalse($result);
    }

    /**
     * @test
     */
    public function it_returns_nothing_on_nothing(): void
    {
        $test_countries = [];
        $result = $this->european_countries_service->getCountryNames($test_countries);
        $this->assertIsArray($result);
        $this->assertEmpty($result);
    }
}
